<?php
 namespace Compassplus\Sdk\Customer; use InvalidArgumentException; use League; use League\ISO3166\ISO3166; use OutOfBoundsException; use UnexpectedValueException; use function is_numeric; use function preg_match; class Address { public $addressline; private $country; private $region; private $city; private $zip; public function __construct() { } public function getRegion() { return $this->region; } public function setRegion($region) { if (!preg_match("/^[a-z]+[a-z\s\-]*$/i", $region)) { throw new UnexpectedValueException('Only latin letters can be used in region name'); } $this->region = $region; } public function getCountry() { return $this->country; } public function setCountry($country) { if (!is_numeric($country)) { throw new InvalidArgumentException('Invalid ISO country code'); } $iso = (new ISO3166())->all(); if (array_key_exists($country, $iso)) { throw new OutOfBoundsException('Invalid ISO country code '); } $this->country = $country; } public function getCity() { return $this->city; } public function setCity($city) { if (!preg_match("/^[a-z]+[a-z\d\s\-]*$/i", $city)) { throw new UnexpectedValueException('Only latin letters can be used in city name'); } $this->city = $city; } public function getZip() { return $this->zip; } public function setZip($zip) { if (!is_numeric($zip)) { throw new InvalidArgumentException('Invalid postal index argument type'); } $this->zip = $zip; } public function getAddressline() { return $this->addressline; } public function setAddressline($addressline) { if (!preg_match("/^[a-z]+[a-z\d\s\-\/,_.]*$/i", $addressline)) { throw new UnexpectedValueException('Only latin letters and numbers can be used in address line'); } $this->addressline = $addressline; } } 