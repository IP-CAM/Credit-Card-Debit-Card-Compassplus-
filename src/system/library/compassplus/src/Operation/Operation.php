<?php
 namespace Compassplus\Sdk\Operation; use InvalidArgumentException; use Respect\Validation\Validator as v; use Compassplus\Sdk\Customer; use Compassplus\Sdk\Customer\Card; use Compassplus\Sdk\Merchant; use Compassplus\Sdk\Order; class Operation { public $order; public $card; public $customer; public $recipient; public $merchant; private $refundAmount; private $refundCurrency; public function __construct( Order $order, Customer $customer = null, Merchant $merchant = null, Card $card = null, Customer $recipient = null ) { $this->order = $order; $this->card = $card; $this->recipient = $recipient; $this->customer = $customer; $this->merchant = $merchant; } public function setCard(Card $card) { $this->card = $card; } public function setOrder($order) { $this->order = $order; } public function setCustomer(Customer $customer) { $this->customer = $customer; } public function setRecipient(Customer $recipient) { $this->recipient = $recipient; } public function setMerchant(Merchant $merchant) { $this->merchant = $merchant; } public function getRefundAmount() { return $this->refundAmount; } public function setRefundAmount($amount) { if (!v::numeric()->positive()->validate($amount)) { throw new InvalidArgumentException("Amount is not numeric"); } $amount *= 100; $this->refundAmount = $amount; } public function getRefundCurrency() { return $this->refundCurrency; } public function setRefundCurrency($currency) { if (!v::numeric()->length(3, 3)->positive()->validate($currency)) { throw new InvalidArgumentException('Currency not in ISO 4217 numeric-3 format'); } $this->refundCurrency = (int)$currency; } } 