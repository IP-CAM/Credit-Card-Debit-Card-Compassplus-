<?php
 namespace Compassplus\Sdk; use Compassplus\Sdk\Config\Config; use Compassplus\Sdk\Request\DataProvider; use Exception; use GuzzleHttp\Client; use GuzzleHttp\Message\FutureResponse; use GuzzleHttp\Message\ResponseInterface; use GuzzleHttp\Ring\Future\FutureInterface; use InvalidArgumentException; use SplFileInfo; class Connector { public $orderData; private $certPassword; private $secureConnectionOnly = true; private $url; private $pathToCaCertFile; private $debug = false; private $pathToCertFile; public function __construct($host = null, $port = null) { $this->setCaCert(__DIR__ . '/../cacert.pem'); $endpoint = '/exec'; if (!empty($host)) { if ($port !== null) { $this->url = 'https://' . $host . ':' . $port . $endpoint; } else { $this->url = 'https://' . $host . $endpoint; } } } public function debug() { $this->debug = true; } public function sendRequest() { $url = $this->getUrl(); $body = $this->orderData; return $this->getResponse($url, $body); } private function getUrl() { if (empty($this->url)) { if (Config::getPort()) { $url = Config::getHostName() . ':' . Config::getPort() . '/exec'; } else { $url = Config::getHostName() . '/exec'; } if (!strpos($url, '://')) { $url = 'https://' . $url; } return $url; } return $this->url; } private function getResponse($url, $body) { return $this->send($url, $body); } private function send($url, $body) { ini_set('curl.cainfo', $this->pathToCaCertFile); $client = new Client(); $options = [ 'debug' => true, 'body' => $body, 'verify' => $this->pathToCaCertFile, 'cert' => [$this->pathToCertFile, $this->certPassword], 'config' => [ 'curl' => [ CURLOPT_SSL_VERIFYHOST => 2, CURLOPT_SSL_VERIFYPEER => true ] ], 'allow_redirects' => [ 'max' => 5, 'strict' => true, 'referer' => true, 'protocols' => ['https', 'http'], ] ]; if (!$this->secureConnectionOnly) { $options['protocols'] = ['https', 'http']; } if (!empty($this->pathToKey)) { $options['ssl_key'] = $this->pathToKey; } if (is_bool($this->debug) && $this->debug) { $options['debug'] = true; } if (is_bool($this->debug) && $this->debug) { error_log(json_encode([ "CAcert path" => dirname(__DIR__) . DIRECTORY_SEPARATOR . $caCertFileName, "Cert path" => $this->pathToCertFile, "URL" => $url, "Body" => $body ]), 0); } $response = $client->post($url, $options); return $response; } public function setUnsecuredConnection() { $this->secureConnectionOnly = false; } public function setCert($pathToCert, $password) { $this->pathToCertFile = $this->getRealPath($pathToCert); $this->certPassword = $password; } public function setKey($pathToKey) { $this->pathToKey = $this->getRealPath($pathToKey); } private function getRealPath($pathToFile) { $info = new SplFileInfo($pathToFile); if (!$info->isFile()) { throw new InvalidArgumentException(sprintf('Cert file not found in: %s', $pathToFile)); } if (!$info->isReadable()) { throw new Exception(sprintf('Cert file %s not readable', $pathToFile)); } return $info->getRealPath(); } private function setCaCert($caCertFile) { $this->pathToCaCertFile = $this->getRealPath($caCertFile); } } 